<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#667eea">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <meta name="format-detection" content="telephone=no">
  <title>My Media Gallery</title>
  
  <!-- Preload critical resources -->
  <link rel="preload" href="/styles.css" as="style">
  <link rel="dns-prefetch" href="//res.cloudinary.com">
  <link rel="preconnect" href="//res.cloudinary.com">
  
  <link rel="stylesheet" href="/styles.css">
  
  <!-- Inline critical CSS for above-the-fold content -->
  <style>
    .loading { opacity: 0; transition: opacity 0.3s; }
    .loaded { opacity: 1; }
    .skeleton { background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: loading 1.5s infinite; }
    @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } }
    .media-content { position: relative; }
    .media-placeholder { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: #f1f3f4; display: flex; align-items: center; justify-content: center; }
    .media-placeholder img { width: 40px; height: 40px; opacity: 0.5; }
  </style>
</head>
<body>
  <header>
    <h1>My Media Gallery</h1>
    <a href="/upload" class="upload-btn">Upload Media</a>
  </header>
  <main>
    <% if (success) { %>
      <div class="success"><%= success %></div>
    <% } %>
    <div class="gallery" id="gallery">
      <% if (media.length === 0) { %>
        <p>No media uploaded yet.</p>
      <% } %>
      <% media.forEach((item, index) => { %>
        <div class="media-item loading" data-index="<%= index %>">
          <div class="media-content" onclick="openModal(<%= index %>)">
            <% if (item.type.startsWith('image/')) { %>
              <!-- Optimized image loading with Cloudinary transformations -->
              <div class="media-placeholder">
                <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23666' d='M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z'/%3E%3C/svg%3E" alt="placeholder">
              </div>
              <img 
                src="<%= item.thumbnail_url || item.url.replace('/upload/', '/upload/f_auto,q_auto,w_300,h_300,c_fill/') %>" 
                data-src="<%= item.medium_url || item.url.replace('/upload/', '/upload/f_auto,q_auto,w_600,h_600,c_fill/') %>"
                data-full="<%= item.full_url || item.url %>"
                alt="<%= item.originalname %>" 
                loading="lazy"
                onload="imageLoaded(this, <%= index %>)"
                onerror="imageError(this, <%= index %>)"
                class="optimized-image"
              />
            <% } else if (item.type === 'video/mp4') { %>
              <div class="media-placeholder">
                <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23666' d='M8 5v14l11-7z'/%3E%3C/svg%3E" alt="video placeholder">
              </div>
              <video 
                src="<%= item.url %>" 
                preload="metadata" 
                onloadeddata="videoLoaded(this, <%= index %>)"
                onerror="videoError(this, <%= index %>)"
                class="optimized-video"
              ></video>
            <% } %>
          </div>
          <div class="meta">
            <div><strong><%= item.originalname %></strong></div>
            <span><%= item.uploadedAt %></span>
          </div>
        </div>
      <% }) %>
    </div>
  </main>

  <!-- Modal -->
  <div id="mediaModal" class="modal">
    <span class="close" onclick="closeModal()">&times;</span>
    <div class="modal-content">
      <img id="modalImage" style="display: none;">
      <video id="modalVideo" controls style="display: none;"></video>
      <div class="modal-info" id="modalInfo"></div>
      <div class="modal-actions" id="modalActions" style="display: none;">
        <button class="modal-delete-btn" onclick="confirmDeleteFromModal()">
          üóëÔ∏è Delete Media
        </button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal">
    <div class="modal-content delete-modal">
      <h3>Confirm Delete</h3>
      <p>Are you sure you want to delete "<span id="deleteFileName"></span>"?</p>
      <p>This action cannot be undone.</p>
      <div class="delete-actions">
        <button class="cancel-btn" onclick="closeDeleteModal()">Cancel</button>
        <button class="confirm-delete-btn" onclick="deleteMedia()">Delete</button>
      </div>
    </div>
  </div>

  <script>
    // Performance optimizations
    'use strict';
    
    // Cache DOM elements
    const mediaData = <%- JSON.stringify(media) %>;
    const gallery = document.getElementById('gallery');
    const mediaModal = document.getElementById('mediaModal');
    const deleteModal = document.getElementById('deleteModal');
    const modalImage = document.getElementById('modalImage');
    const modalVideo = document.getElementById('modalVideo');
    const modalInfo = document.getElementById('modalInfo');
    const deleteFileName = document.getElementById('deleteFileName');
    
    let deletePublicId = null;
    let isModalOpen = false;
    let loadedImages = new Set();
    let currentModalIndex = -1;
    
    // Optimized image loading functions
    function imageLoaded(img, index) {
      const mediaItem = document.querySelector(`[data-index="${index}"]`);
      if (mediaItem) {
        mediaItem.classList.add('loaded');
        loadedImages.add(index);
        
        // Remove placeholder
        const placeholder = mediaItem.querySelector('.media-placeholder');
        if (placeholder) {
          placeholder.style.display = 'none';
        }
        
        // Load higher quality image if needed
        if (window.innerWidth > 768 && img.dataset.src) {
          const highResImg = new Image();
          highResImg.onload = function() {
            img.src = this.src;
          };
          highResImg.src = img.dataset.src;
        }
      }
    }
    
    function imageError(img, index) {
      const mediaItem = document.querySelector(`[data-index="${index}"]`);
      if (mediaItem) {
        mediaItem.classList.add('loaded');
        img.style.display = 'none';
        const placeholder = mediaItem.querySelector('.media-placeholder');
        if (placeholder) {
          placeholder.innerHTML = '<span style="color: #999;">Image failed to load</span>';
        }
      }
    }
    
    function videoLoaded(video, index) {
      const mediaItem = document.querySelector(`[data-index="${index}"]`);
      if (mediaItem) {
        mediaItem.classList.add('loaded');
        loadedImages.add(index);
        
        // Remove placeholder
        const placeholder = mediaItem.querySelector('.media-placeholder');
        if (placeholder) {
          placeholder.style.display = 'none';
        }
      }
    }
    
    function videoError(video, index) {
      const mediaItem = document.querySelector(`[data-index="${index}"]`);
      if (mediaItem) {
        mediaItem.classList.add('loaded');
        video.style.display = 'none';
        const placeholder = mediaItem.querySelector('.media-placeholder');
        if (placeholder) {
          placeholder.innerHTML = '<span style="color: #999;">Video failed to load</span>';
        }
      }
    }
    
    // Debounce function for performance
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    // Optimized modal functions
    function openModal(index) {
      if (isModalOpen) return;
      
      const item = mediaData[index];
      if (!item) return;
      
      currentModalIndex = index;
      
      if (item.type.startsWith('image/')) {
        // Use full resolution image in modal
        const fullImageUrl = item.full_url || item.url.replace('/upload/', '/upload/f_auto,q_auto/');
        modalImage.src = fullImageUrl;
        modalImage.style.display = 'block';
        modalVideo.style.display = 'none';
      } else if (item.type === 'video/mp4') {
        modalVideo.src = item.url;
        modalVideo.style.display = 'block';
        modalImage.style.display = 'none';
      }
      
      modalInfo.innerHTML = `
        <strong>${item.originalname}</strong><br>
        Uploaded: ${item.uploadedAt}
      `;
      
      // Show delete button in modal
      const modalActions = document.getElementById('modalActions');
      modalActions.style.display = 'block';
      
      mediaModal.style.display = 'block';
      document.body.style.overflow = 'hidden';
      isModalOpen = true;
    }
    
    function closeModal() {
      if (!isModalOpen) return;
      
      mediaModal.style.display = 'none';
      modalVideo.pause();
      document.body.style.overflow = 'auto';
      isModalOpen = false;
      currentModalIndex = -1;
      
      // Hide delete button
      const modalActions = document.getElementById('modalActions');
      modalActions.style.display = 'none';
    }

    function confirmDeleteFromModal() {
      if (currentModalIndex === -1) return;
      
      const item = mediaData[currentModalIndex];
      if (!item) return;
      
      confirmDelete(item.public_id, item.originalname);
    }

    function confirmDelete(publicId, fileName) {
      deletePublicId = publicId;
      deleteFileName.textContent = fileName;
      deleteModal.style.display = 'block';
      document.body.style.overflow = 'hidden';
    }

    function closeDeleteModal() {
      deleteModal.style.display = 'none';
      deletePublicId = null;
      document.body.style.overflow = 'auto';
    }

    async function deleteMedia() {
      if (!deletePublicId) return;
      
      const deleteBtn = document.querySelector('.confirm-delete-btn');
      const originalText = deleteBtn.textContent;
      deleteBtn.textContent = 'Deleting...';
      deleteBtn.disabled = true;
      
      try {
        const response = await fetch('/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ public_id: deletePublicId })
        });

        const result = await response.json();
        
        if (result.success) {
          // Optimized reload with cache busting
          window.location.reload();
        } else {
          alert('Delete failed: ' + result.error);
        }
      } catch (error) {
        alert('Delete failed: ' + error.message);
      } finally {
        deleteBtn.textContent = originalText;
        deleteBtn.disabled = false;
        closeDeleteModal();
      }
    }
    
    // Event delegation for better performance
    document.addEventListener('click', function(event) {
      if (event.target === mediaModal) {
        closeModal();
      } else if (event.target === deleteModal) {
        closeDeleteModal();
      }
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        closeModal();
        closeDeleteModal();
      }
    });
    
    // Prevent zoom on double tap (mobile)
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function (event) {
      const now = (new Date()).getTime();
      if (now - lastTouchEnd <= 300) {
        event.preventDefault();
      }
      lastTouchEnd = now;
    }, false);
    
    // Intersection Observer for lazy loading with better performance
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            if (img.dataset.src && !img.src.includes('cloudinary')) {
              img.src = img.dataset.src;
            }
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px', // Start loading 50px before image enters viewport
        threshold: 0.1
      });
      
      document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
      });
    }
    
    // Preload images that are likely to be viewed next
    function preloadNextImages() {
      const visibleItems = Array.from(document.querySelectorAll('.media-item.loaded'));
      if (visibleItems.length > 0) {
        const lastVisibleIndex = parseInt(visibleItems[visibleItems.length - 1].dataset.index);
        const nextIndex = lastVisibleIndex + 1;
        
        if (nextIndex < mediaData.length && !loadedImages.has(nextIndex)) {
          const nextItem = mediaData[nextIndex];
          if (nextItem && nextItem.type.startsWith('image/')) {
            const preloadImg = new Image();
            preloadImg.src = nextItem.thumbnail_url || nextItem.url.replace('/upload/', '/upload/f_auto,q_auto,w_300,h_300,c_fill/');
          }
        }
      }
    }
    
    // Service Worker registration for caching
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then(registration => {
            console.log('SW registered: ', registration);
          })
          .catch(registrationError => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }
    
    // Performance monitoring
    window.addEventListener('load', () => {
      if ('performance' in window) {
        const perfData = performance.getEntriesByType('navigation')[0];
        console.log('Page load time:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
        
        // Log image loading performance
        const imageLoadTimes = performance.getEntriesByType('resource')
          .filter(entry => entry.name.includes('cloudinary') && entry.name.includes('image'))
          .map(entry => entry.duration);
        
        if (imageLoadTimes.length > 0) {
          console.log('Average image load time:', imageLoadTimes.reduce((a, b) => a + b) / imageLoadTimes.length, 'ms');
        }
      }
    });
    
    // Preload next images when scrolling
    const debouncedPreload = debounce(preloadNextImages, 100);
    window.addEventListener('scroll', debouncedPreload);
  </script>
</body>
</html> 